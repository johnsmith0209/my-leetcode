#! /usr/local/bin/node
'use strict';
/**
 * Definition for singly-linked list.
 * function ListNode(val) {
 *     this.val = val;
 *     this.next = null;
 * }
 */
function ListNode(val) {
  this.val = val;
  this.next = null;
}
/**
 * @param {ListNode} l1
 * @param {ListNode} l2
 * @return {ListNode}
 */
var addTwoNumbers = function(l1, l2) {
  var list = [];
  var carry_over = 0;
  while(true) {
    if (!l1 && !l2 && !carry_over) break;
    var node_1_val = l1 ? l1.val : 0;
    var node_2_val = l2 ? l2.val : 0;
    var sum = node_1_val + node_2_val + carry_over;
    console.log(sum, node_1_val, node_2_val, carry_over);
    if (sum >= 10) {
      sum -= 10;
      carry_over = 1;
    }else{
      carry_over = 0;
    }
    var new_node = new ListNode(sum);
    if (list.length) {
      list[list.length - 1].next = new_node;
    }
    list.push(new_node);
    l1 = l1 && l1.next;
    l2 = l2 && l2.next;
  }
  console.log(list);
  return list[0];
};

// 3 -> 4 -> 9
let l1_1 = new ListNode(2)
let l1_2 = new ListNode(4)
let l1_3 = new ListNode(3)
l1_1.next = l1_2
l1_2.next = l1_3

// 9 -> 6 -> 4
let l2_1 = new ListNode(5)
let l2_2 = new ListNode(6)
let l2_3 = new ListNode(4)
l2_1.next = l2_2
l2_2.next = l2_3

// sum suppose to be 3 -> 1 -> 3 -> 1

var dumpList = (l) => {
  let vals = []
  while (l) {
    vals.push(l.val);
    if (l.next)
      l = l.next;
    else
      break;
  }
  console.log(`dump list: ${vals.join(' -> ')}`);
};

dumpList(l1_1);
dumpList(l2_1);

dumpList(addTwoNumbers(l1_1, l2_1));